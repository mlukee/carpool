package CarpoolLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AppApiEndpoints;
  private ConceptPresentation props_AppComponents;
  private ConceptPresentation props_AppMenuItems;
  private ConceptPresentation props_AppRender;
  private ConceptPresentation props_Button;
  private ConceptPresentation props_ButtonIcon;
  private ConceptPresentation props_ButtonLink;
  private ConceptPresentation props_CardContent;
  private ConceptPresentation props_CardTitle;
  private ConceptPresentation props_CarpoolNotation;
  private ConceptPresentation props_ChildRender;
  private ConceptPresentation props_FormInput;
  private ConceptPresentation props_RenderButtons;
  private ConceptPresentation props_RenderCard;
  private ConceptPresentation props_RenderForm;
  private ConceptPresentation props_RenderHeading;
  private ConceptPresentation props_RenderTable;
  private ConceptPresentation props_RenderTabs;
  private ConceptPresentation props_RenderText;
  private ConceptPresentation props_TableCell;
  private ConceptPresentation props_TableHeading;
  private ConceptPresentation props_TableRow;
  private ConceptPresentation props_TableTitle;
  private ConceptPresentation props_TabsContent;
  private ConceptPresentation props_TabsList;
  private ConceptPresentation props_TabsListRow;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AppApiEndpoints:
        if (props_AppApiEndpoints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AppApiEndpoints = cpb.create();
        }
        return props_AppApiEndpoints;
      case LanguageConceptSwitch.AppComponents:
        if (props_AppComponents == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AppComponents = cpb.create();
        }
        return props_AppComponents;
      case LanguageConceptSwitch.AppMenuItems:
        if (props_AppMenuItems == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AppMenuItems = cpb.create();
        }
        return props_AppMenuItems;
      case LanguageConceptSwitch.AppRender:
        if (props_AppRender == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AppRender = cpb.create();
        }
        return props_AppRender;
      case LanguageConceptSwitch.Button:
        if (props_Button == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Button");
          props_Button = cpb.create();
        }
        return props_Button;
      case LanguageConceptSwitch.ButtonIcon:
        if (props_ButtonIcon == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ButtonIcon = cpb.create();
        }
        return props_ButtonIcon;
      case LanguageConceptSwitch.ButtonLink:
        if (props_ButtonLink == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ButtonLink = cpb.create();
        }
        return props_ButtonLink;
      case LanguageConceptSwitch.CardContent:
        if (props_CardContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CardContent = cpb.create();
        }
        return props_CardContent;
      case LanguageConceptSwitch.CardTitle:
        if (props_CardTitle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CardTitle = cpb.create();
        }
        return props_CardTitle;
      case LanguageConceptSwitch.CarpoolNotation:
        if (props_CarpoolNotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CarpoolNotation = cpb.create();
        }
        return props_CarpoolNotation;
      case LanguageConceptSwitch.ChildRender:
        if (props_ChildRender == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ChildRender = cpb.create();
        }
        return props_ChildRender;
      case LanguageConceptSwitch.FormInput:
        if (props_FormInput == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FormInput = cpb.create();
        }
        return props_FormInput;
      case LanguageConceptSwitch.RenderButtons:
        if (props_RenderButtons == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("renderButtons");
          props_RenderButtons = cpb.create();
        }
        return props_RenderButtons;
      case LanguageConceptSwitch.RenderCard:
        if (props_RenderCard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("card");
          props_RenderCard = cpb.create();
        }
        return props_RenderCard;
      case LanguageConceptSwitch.RenderForm:
        if (props_RenderForm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("form");
          props_RenderForm = cpb.create();
        }
        return props_RenderForm;
      case LanguageConceptSwitch.RenderHeading:
        if (props_RenderHeading == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("heading");
          props_RenderHeading = cpb.create();
        }
        return props_RenderHeading;
      case LanguageConceptSwitch.RenderTable:
        if (props_RenderTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("table");
          props_RenderTable = cpb.create();
        }
        return props_RenderTable;
      case LanguageConceptSwitch.RenderTabs:
        if (props_RenderTabs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("renderTabs");
          props_RenderTabs = cpb.create();
        }
        return props_RenderTabs;
      case LanguageConceptSwitch.RenderText:
        if (props_RenderText == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("text");
          props_RenderText = cpb.create();
        }
        return props_RenderText;
      case LanguageConceptSwitch.TableCell:
        if (props_TableCell == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TableCell = cpb.create();
        }
        return props_TableCell;
      case LanguageConceptSwitch.TableHeading:
        if (props_TableHeading == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TableHeading = cpb.create();
        }
        return props_TableHeading;
      case LanguageConceptSwitch.TableRow:
        if (props_TableRow == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TableRow = cpb.create();
        }
        return props_TableRow;
      case LanguageConceptSwitch.TableTitle:
        if (props_TableTitle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TableTitle = cpb.create();
        }
        return props_TableTitle;
      case LanguageConceptSwitch.TabsContent:
        if (props_TabsContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TabsContent = cpb.create();
        }
        return props_TabsContent;
      case LanguageConceptSwitch.TabsList:
        if (props_TabsList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TabsList = cpb.create();
        }
        return props_TabsList;
      case LanguageConceptSwitch.TabsListRow:
        if (props_TabsListRow == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TabsListRow = cpb.create();
        }
        return props_TabsListRow;
    }
    return null;
  }
}
