package CarpoolLang.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AppApiEndpoints_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AppComponents_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AppMenuItems_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AppRender_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Button_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ButtonIcon_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ButtonLink_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new CardContent_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new CardTitle_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new CarpoolNotation_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new FormInput_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new RenderButtons_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new RenderCard_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new RenderForm_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new RenderHeading_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new RenderTable_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new RenderTabs_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new RenderText_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new TableCell_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new TableHeading_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new TableRow_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new TableTitle_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new TabsContent_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new TabsList_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new TabsListRow_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AppRender_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa017407L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa002bb6L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383ef9fbeb21L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa05b791L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa16de2bL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa19701bL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x74d571161a9772ecL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x58d9188ac92a5f2aL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x58d9188ac92a5f23L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383ef9f9a3f7L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa11516eL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x74d571161a9cef1aL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x58d9188ac92a5f1dL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa10088dL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa0de721L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa1aca6bL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x62945a6b81827485L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa09d317L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa1aca77L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa1aca6dL), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa1aca71L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa2a77f5L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x62945a6b818d8778L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x62945a6b81827487L), MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x62945a6b818274b1L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x722e4ffa13ae440cL, 0xb33c3c19945a9c69L, 0x6234383efa05b791L)).seal();
}
